#!/bin/bash

# Architect Installation Script
# This script installs architect CLI tool system-wide

set -e 

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
SCRIPT_NAME="architect"
SCRIPT_PATH="main/architect.py"
INSTALL_DIR="/usr/local/bin"
LOCAL_INSTALL_DIR="$HOME/.local/bin"
WRAPPER_NAME="architect"

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

command_exists() {
    command -v "$1" >/dev/null 2>&1
}

check_python() {
    if ! command_exists python3; then
        print_error "Python 3 is required but not installed."
        exit 1
    fi
    
    PYTHON_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
    print_info "Found Python $PYTHON_VERSION"
    
    if python3 -c 'import sys; exit(0 if sys.version_info >= (3, 6) else 1)'; then
        print_success "Python version is compatible"
    else
        print_error "Python 3.6 or higher is required. Found: $PYTHON_VERSION"
        exit 1
    fi
}

create_wrapper() {
    local install_path="$1"
    local script_full_path="$2"
    local wrapper_file="$install_path/$WRAPPER_NAME"
    
    cat > "$wrapper_file" << EOF
#!/bin/bash
# Architect Wrapper Script
# Generated by install.sh

SCRIPT_DIR="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
ARCHITECT_PATH="$script_full_path"

# Check if the original script exists
if [ ! -f "\$ARCHITECT_PATH" ]; then
    echo "Error: Architect script not found at \$ARCHITECT_PATH"
    echo "Please reinstall architect CLI."
    exit 1
fi

# Execute the Python script with all arguments
exec python3 "\$ARCHITECT_PATH" "\$@"
EOF
    
    chmod +x "$wrapper_file"
}

create_wrapper_with_sudo() {
    local install_path="$1"
    local script_full_path="$2"
    local wrapper_file="$install_path/$WRAPPER_NAME"
    
    # Create a temporary file with the wrapper content
    local temp_file=$(mktemp)
    cat > "$temp_file" << EOF
#!/bin/bash
# Architect CLI Wrapper Script
# Generated by install.sh

SCRIPT_DIR="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
ARCHITECT_PATH="$script_full_path"

# Check if the original script exists
if [ ! -f "\$ARCHITECT_PATH" ]; then
    echo "Error: Architect script not found at \$ARCHITECT_PATH"
    echo "Please reinstall architect CLI."
    exit 1
fi

# Execute the Python script with all arguments
exec python3 "\$ARCHITECT_PATH" "\$@"
EOF
    
    # Copy the temp file to the target location with sudo
    sudo cp "$temp_file" "$wrapper_file"
    sudo chmod 755 "$wrapper_file"
    
    # Clean up temp file
    rm "$temp_file"
}

install_system_wide() {
    print_info "Installing system-wide to $INSTALL_DIR"
    
    if [ ! -w "$INSTALL_DIR" ]; then
        print_warning "Need sudo privileges to install to $INSTALL_DIR"
        if ! sudo -v; then
            print_error "sudo access required for system-wide installation"
            return 1
        fi
    fi
    
    local script_full_path="$(pwd)/$SCRIPT_PATH"
    
    if [ -w "$INSTALL_DIR" ]; then
        create_wrapper "$INSTALL_DIR" "$script_full_path"
    else
        create_wrapper_with_sudo "$INSTALL_DIR" "$script_full_path"
    fi
    
    print_success "Installed to $INSTALL_DIR/$WRAPPER_NAME"
    return 0
}

install_local() {
    print_info "Installing locally to $LOCAL_INSTALL_DIR"
    
    mkdir -p "$LOCAL_INSTALL_DIR"
    
    local script_full_path="$(pwd)/$SCRIPT_PATH"
    create_wrapper "$LOCAL_INSTALL_DIR" "$script_full_path"
    
    print_success "Installed to $LOCAL_INSTALL_DIR/$WRAPPER_NAME"
    
    if [[ ":$PATH:" != *":$LOCAL_INSTALL_DIR:"* ]]; then
        print_warning "Warning: $LOCAL_INSTALL_DIR is not in your PATH"
        print_info "Add the following line to your ~/.bashrc or ~/.zshrc:"
        echo "export PATH=\"\$HOME/.local/bin:\$PATH\""
        print_info "Then run: source ~/.bashrc (or restart your terminal)"
    fi
}

install_dependencies() {
    print_info "Checking for optional dependencies..."
    
    if python3 -c "import yaml" 2>/dev/null; then
        print_success "PyYAML is installed (YAML support available)"
    else
        print_warning "PyYAML not found (YAML support disabled)"
        read -p "Do you want to install PyYAML? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            if command_exists pip3; then
                pip3 install --user PyYAML
                print_success "PyYAML installed"
            else
                print_warning "pip3 not found. Please install PyYAML manually: pip3 install PyYAML"
            fi
        fi
    fi
}

test_installation() {
    print_info "Testing installation..."
    
    # Refresh PATH to include newly installed command
    hash -r
    
    if command_exists "$WRAPPER_NAME"; then
        print_success "'$WRAPPER_NAME' command is available"
        
        # Test basic functionality
        if $WRAPPER_NAME --help >/dev/null 2>&1; then
            print_success "Command executes correctly"
        else
            print_error "✗ Command failed to execute"
            return 1
        fi
    else
        print_error "✗ '$WRAPPER_NAME' command not found in PATH"
        print_info "You may need to restart your terminal or run: hash -r"
        return 1
    fi
}

show_usage() {
    print_info "Usage examples:"
    echo "  $WRAPPER_NAME --help"
    echo "  $WRAPPER_NAME scan ."
    echo "  $WRAPPER_NAME create -f structure.txt"
    echo "  $WRAPPER_NAME --interactive"
}

main() {
    echo "    ╔════════════════════════════════════════════════════════════════════════════════╗"
    echo "    ║                                                                                ║"
    echo "    ║       █████╗ ██████╗  ██████╗██╗  ██╗██╗████████╗███████╗ ██████╗████████╗     ║"
    echo "    ║      ██╔══██╗██╔══██╗██╔════╝██║  ██║██║╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝     ║"
    echo "    ║      ███████║██████╔╝██║     ███████║██║   ██║   █████╗  ██║        ██║        ║"
    echo "    ║      ██╔══██║██╔══██╗██║     ██╔══██║██║   ██║   ██╔══╝  ██║        ██║        ║"
    echo "    ║      ██║  ██║██║  ██║╚██████╗██║  ██║██║   ██║   ███████╗╚██████╗   ██║        ║"
    echo "    ║      ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝   ╚═╝   ╚══════╝ ╚═════╝   ╚═╝        ║"
    echo "    ║                                                                                ║"
    echo "    ║                           CLI File structure builder                           ║"
    echo "    ║                                    v 0.1.4                                     ║"
    echo "    ╚════════════════════════════════════════════════════════════════════════════════╝"
    
    if [ ! -f "$SCRIPT_PATH" ]; then
        print_error "Error: $SCRIPT_PATH not found"
        print_error "Please run this script from the architect project root directory"
        exit 1
    fi
    
    check_python
    
    echo
    print_info "Choose installation type:"
    echo "  1) System-wide installation - recommended"
    echo "  2) Local installation"
    echo "  3) Cancel"
    echo
    
    while true; do
        read -p "Enter your choice (1-3): " choice
        case $choice in
            1)
                if install_system_wide; then
                    break
                else
                    print_error "System-wide installation failed"
                    exit 1
                fi
                ;;
            2)
                install_local
                break
                ;;
            3)
                print_info "Installation cancelled"
                exit 0
                ;;
            *)
                print_error "Invalid choice. Please enter 1, 2, or 3."
                ;;
        esac
    done
    
    echo
    install_dependencies
    
    echo
    test_installation
    
    echo
    print_success "Installation completed successfully!"
    echo
    show_usage
    
    if [[ "$choice" == "2" ]] && [[ ":$PATH:" != *":$LOCAL_INSTALL_DIR:"* ]]; then
        echo
        print_warning "Don't forget to add $LOCAL_INSTALL_DIR to your PATH!"
    fi
}

main "$@"